# 
# Script written for Continuous Authentication Project (SEG4300)
#
# The purpose of this script is to add random noise to pre-existing
# CSV file content and write it out to two new CSV files:
# 
# Outputs: 	OutputAnomalized.csv - contains all original data + noisy points
#		OutputNoisyOnly.csv - only contains noisy points of data
#
# For every cloudlet: 	cloudlet[0] - VM id
#			cloudlet[1] - Actual CPU
#			cloudlet[2] - Length
#			cloudlet[3] - Input Size (file size)
#			cloudlet[4] - Output Size
#			cloudlet[5] - End Time
#
# For this usage we simply iterate through the Output.csv generated by
# our CloudSim java project's individual Cloudlets and modify all of the
# parameters except the VM id.
#

import numpy as np
import random
import csv


NOISE_PERCENT = 0.01

# Data from existing csv file
output = np.genfromtxt('Output.csv', skip_header=1, delimiter=',')

# Array for all data
dataOutput  = [["VM ID","Actual CPU","Length","Input Size","Output Size","End Time"]]
# Array for anomalies
noisyPoints = [["VM ID","Actual CPU","Length","Input Size","Output Size","End Time"]]

# This part of the script handles generating noise within the cloudlets
# It iterates through the CSV file and adds the results to the two arrays
for cloudlet in output:
	if(random.random() < (NOISE_PERCENT)):
		for data in cloudlet[1:]: # skip VM id
			temp = data
			# Either add or remove from data value on coinflip
			if(random.random() > 0.5):
				data += int((random.random()+1) * (100*data/(random.random()+0.5))) 
			else:
				data -= int((random.random()+1) * (100*data/(random.random()+0.5)))
			
			#Ensure positive data			
			if(data < 0):
				data = temp
				data += int((random.random()+0.5) * (100*data/(random.random()+0.5)))
	
		noisyPoints.append(cloudlet)
	# For full list of data (anomalies & regular points)
	dataOutput.append(cloudlet)


# For the case of this project I chose to generate two CSV files from the modified data
# One contains all of the data (included the 'corrupted' cloudlets) and the other contains only the noisy points

with open('OutputNoisy.csv', 'wb') as csvfile:
	writer = csv.writer(csvfile, delimiter=",")
	writer.writerows(dataOutput)

with open('OutputNoisyOnly.csv', 'wb') as csvfile:
	writer = csv.writer(csvfile, delimiter=",")
	writer.writerows(noisyPoints)



# Old method, could probably be cleaned up
'''
for cloudlet in alldata[1:]:
	if(random.random() < 0.10): 
		# Cloudlet[3] represents file size (input)	
		c3 = cloudlet[3]
		# Cloudlet[4] represents output size
		c4 = cloudlet[4]

		# random generation
		c3 += int((random.random()+0.5) * 100) 
		c4 += int((random.random()+0.5) * 100)
		
		# ensures the generated values are positive & random
		# only useful when 
		while(c3 <= 0):
			c3 = cloudlet[3]
			c3 += int((random.random() + 0.5) * 100) 
			
		while(c4 <= 0):
			c4 = cloudlet[4]
			c4 += int((random.random() + 0.5) * 100) 

		cloudlet[3] = c3
		cloudlet[4] = c4

		noisyPoints.append(cloudlet)
			 
'''


